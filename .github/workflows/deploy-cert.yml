name: Deploy CERT

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release-cert:
    runs-on: ubuntu-latest
    outputs:
      rc_tag: ${{ steps.set-tag.outputs.rc_tag }}
    steps:
      - name: Generar RC Tag dinámico
        id: set-tag
        run: |
          DATE=$(date +'%Y%m%d')
          RAND=$(openssl rand -hex 2)
          TAG="RC-${DATE}-${RAND}"

          echo "rc_tag=$TAG" >> $GITHUB_OUTPUT
          echo "✅ RC Tag generado: $TAG"

          # Guardamos en un JSON para usar en el siguiente paso
          echo "{\"rc_tag\": \"$TAG\"}" > rc_tag.json

      - name: Subir artifact con RC Tag
        uses: actions/upload-artifact@v4
        with:
          name: rc-tag
          path: rc_tag.json

      - name: Crear Release en GitHub
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set-tag.outputs.rc_tag }}
          name: Release Candidate ${{ steps.set-tag.outputs.rc_tag }}
          body: Release Candidate para CERT
          overwrite_files: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verificar Docker instalado
        run: |
          docker --version
          docker compose version || true

      - name: Construir imagen Docker
        run: docker build -t myapp-cert:${{ steps.tag.outputs.tag_name }} -f docker/cert/Dockerfile .

      - name: Levantar contenedor con Docker Compose
        working-directory: docker/cert
        run: TAG_NAME=${{ steps.tag.outputs.tag_name }} docker compose up -d
